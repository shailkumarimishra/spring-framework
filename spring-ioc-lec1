Q1*** What is dependency injection and what are the advantages?
Ans:- Dependency injection is a technique in which objects do not create their dependencies on itself, instead
	  objects declared dependency that they need and it is external object job or framework job to provide 
	  concreate dependencies to objects.
		
	Types of Dependency injection:-
	1. Setter injection
	2. Constructor injection
	
	Advantages of using Dependency injection are:-
	1. To increase code reusability.
	2. To increase code readability.
	3. To increase code maintainability.
	4. To increase code testability.
	5. To reduce coupling.
	6. To increase cohesion.
	
Q2. what is lazy loading & eager loading?

Q3. Injecting various types of bean properties with setter injection & constructor injection.
	bean may contain following properties type:-
	1. Simple types (example-> all primitives, wrappers, String & Date)
	2. List of Simple type 
	3. Set of Simple type
	4. Map of Simple type
	5. Other bean type (reference type)
	6. Collection of other bean type (like customer, student type)
	7. Properties of Simple type
	
Q4*** Types of Scope in Spring:-
	1. Singleton (default Scope)
	2. Prototype
	3. Session
	4. Request
	5. Global Session (Out of Syllabus)
	
I) Singleton Scope:-
	When bean scope is singleton then only one instance will be created for that bean and same instance 
	will be returned when you call getBean() method.
	
	Singleton is the default scope in the spring container.
	when scope is Singleton the default loading will be aggressive loading.
	
II) Prototype Scope:-
	when bean scope is Prototype then new instance will be created for the bean when you call getBean() method.
	
	Default loading type will be lazy loading.
	
III) Session Scope:-
	 It is equals to HTTPSession in the web application.
	 
IV) Request Scope:-
	 It is equals to HTTPSession in the web application.
	 
V)  Global Scope:-
	 It is equals to the session in the portlet based application.
	 
Q. How can we configure scope in xml file?
Ans :- <bean id="emp" class="com.ioc.demo.Employee" scope="prototype" lazy-init="true"> 

->***  Eager Loading or Aggressive Loading:-

	In the case of Eager Loading all the beans will be loaded, instanciated and initialized by the container at 
	container start of time.
	
	<bean id="emp" class="com.ioc.demo.Employee" scope="prototype" lazy-init="false">
	
->***  Lazy Loading:-
	
	In the case of Lazy Loading all the beans will be loaded, instanciated and initialized when you/container 
	try to call getBean() method
	
	<bean id="emp" class="com.ioc.demo.Employee" scope="prototype" lazy-init="true">
	
->	Wiring*** :-
	Wiring is the process of injecting the dependencies of the beans.
	It can be done in 2 ways:-
	a) Explicit Wiring
	b) Implicit Wiring/Auto Wiring.
	 
a)  Explicit Wiring:-
	In the case of Explicit Wiring you have to specify the beans dependencies explicitly then container will
	inject those depencies.
	<beans>
	<bean id="stu" class="com.ioc.demo.Student">
		<!-- Simple types -->
	   <property name="name" value="Anu"/>
	   <property name="sid" value="10"/>
	   <property name="phoneNo" value="1234"/>
	</bean>
	</beans>
	
b)  Auto Wiring/Implicit Wiring:-
	In the case of Auto Wiring spring container detects the bean dependencies automatically and injects those 
	dependencies.
	<bean id="add" class="com.ioc.demo.Address" autowire="***">
	following are possible values of Auto wire Attributes:-
	1. By Name:-  <bean id="add" class="com.ioc.demo.Address" autowire="byName">
	    
	2. By Type:- <bean id="add" class="com.ioc.demo.Address" autowire="byType">
	
	3. Constructor:- <bean id="add" class="com.ioc.demo.Address" autowire="constructor">
	4. Auto detect:-
	
1. byName:-
	when auto wired value is byName then spring container checks whether any beans instance running in the 
	container whose name or ID is same as the property(variable) name or not.
	
	If bean is found with matching name then it will be injected otherwise property remains uninjected.
	bean will be instanciated using default constructor.
	Dependent beans instances will be detected using bean name.
	detected beans instances will be injected through setter injection only.
	
Q1) What happend at container startup time?
Ans:- step1- Loads and initilise(calling default constructor) all the beans according to beans entry in xml file.  
      
	  step2- Independent beans initilise their property first then dependent beans means property 
			 initilization will happen bottom to top by calling setter() method.
	  
	  step3- Spring container will check any autowire value is specified or not.
	  
				a) byName - If autowired value is byName then spring container will check any bean is running in
							the container with the specified property(variable)name or not.
							If bean is found with specified name then container will initilize the bean otherwise
							it will not initilise.
							
				b) byType - When autowire attribute value is byType then spring container will check whether any
							bean instance is running the container whose type(classType) is same as property type
							or not.
							
                  Case1- If exactly one bean is found with matching type then it will be injected.
				  
                  Case2- If 0 bean is found with matching type then bean property remains uninjected.
				  
                  Case3- If two or more beans are found with the matching type then exception will be thrown 
						 called "UnsatisfiedDependencyException".				  
				
				c) constructor - When autowire attribute value is constructor then spring container will check
								 whether any bean instance is running in the container whose type(classType) is 
								 same as property type or not.
								 Depending on the availability of bean instances spring container will identify
								 the matching constructor and invoke the constructor to inject the dependency.
					
					Case1- If 0 bean is found with matching type then property remain uninjected.
					
					Case2- If exactly one bean is found with matching type and with matching constructor then 
					       it will be injected.
						   
					Case3- If exactly one bean is found with matching type and without matching constructor then 
					       bean property remains uninjected (will throw exception "UnsatisfiedDependencyException").
						   
					Case4- If 2 or more beans are found with matching type then container will try to pick one
						   bean from available multiple beans based on byName autowire process first.
						   
						   If bean is not selected based on byName autowire process then container will simply 
						   ignore it and property remains uninjected.
					
->  Anotation Based autowiring:- 
	To use annotation in the spring application do the following:-
	1. must enable context name space like below-
	
		<beans xmlns="http://www.springframework.org/schema/beans"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns:context="http://www.springframework.org/schema/context"
		 xsi:schemaLocation="http://www.springframework.org/schema/beans
					https://www.springframework.org/schema/beans/spring-beans.xsd
					http://www.springframework.org/schema/context
					https://www.springframework.org/schema/context/spring-context.xsd"> 

	2. Add <context:annotation-config/>	
	   Now you can use annotations.

Q1. @Autowire Vs @Resource
  Note:-	@Autowire + @Qualifier = @Resource.	
	
	@Autowire:- When you use @Autowire then bean will be detected based on byType process and injects them
				(their instances).
				It's functionality is same as autowire = "byType".
		Note:- When you use autowire = "byType" then bean will be detected based on data type and injects using
			   setter methods where as when you use autowire then bean will be detected based on data type and 
			   injects without using setter methods.

Note:- Basic package of spring 1. org.springframework.beans
							   2. org.springframework.context
							   
Q Difference b/w BeanFactory and ApplicationContext
	Ans:-  1. BeanFactory is an interface which has one concreate subclass XmlBeanFactory.
			  where as ApplicationContext is also an interface as following concreate subclass:-
					a) ClassPathXmlApplicationContext
					b) FileSystemXmlApplicationContext
					c) XmlWebApplicationContext
					d) AnnotationConfigApplicationContext
	
			2. Beans configured with BeanFactory container will be loaded lazyily by default.
			   where as Beans configured with  ApplicationContext will be loaded eagerly by default.
			   
			3. BeanFactory container doesn't support Annotation.
			   where as ApplicationContext support Annotation.
			
			4. BeanFactory container doesn't support BeanPostProcessor, EventPublising.
			   where as ApplicationContext support both.
			
			5. BeanFactory container doesn't support InterNationalization.
			   where as ApplicationContext support it.
			   
			Note:- * ApplicationContext is a super set of BeanFactory.
				   * BeanFactory is parent interface of ApplicationContext.  
			
		Similarities:- 
			1.Loads the Bean.
			2.Create the instance of the Bean.
			3.Inject dependency with setter and constructor.
			4.Maintain the Bean life cycle.
			5.Destroying the Bean instances at container shut down time.
	
->  Xml with name space:- 

		1.The purpose of p-namespace is to reduce the xml file size.
		  To implement the namespace you need to follow steps:-
			a) Add xmlns:p="http://www.springframework.org/schema/p" in bean schema 
			b) <bean id="add" class="com.ioc.demo.Address"
					 p:city="Bhopal"
					 p:state="M.P"/>
				<property name= "city" value="Bhopal"/>
				p:city="Bhopal" is the shortcut of above line.
		
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
		
<bean id="add" class="com.ioc.demo.Address"
		p:city="Bhopal"
		p:state="M.P"/>
</beans>	
	
-> Bean Definition Inheritance(BDI):-
	This concept allows to reuse various common properties of a bean.

->  Property editor:-
	If built-in property editor is not fullfill your requirement then you can write custom property editor.
	for custom property editor you have to follow below steps:-
	1) create a editor class extending PropertyEditorSupport.
	2) override public void setAsText(String text){}.
	3) register your custom editor 
			<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
				<property name="customEditors">
					<map>
						<entry key="com.ioc.propertyeditor.StudentId" value="com.ioc.propertyeditor.StudentIdEditor"/>
						<entry key="com.ioc.propertyeditor.Fee" value="com.ioc.propertyeditor.FeeEditor"/>
					</map>
				</property>
			</bean> 

->  Important Annotation and their use:-
	1)@Autowire
	2)@Resource
	3)@Qualifier
	4)@Service
	5)@Repository
	6)@Configuration
	7)@Beans
	8)@Component

	   

	 
	 
	 
	 
	 
	
	
	
	
	
	