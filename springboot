Spring Boot
Q1. What is a Spring Boot?
Answer:- It is a module of the spring framework. It brings all common modules under single umbrella.
		 Spring Boot Dev Tools- live reload to speed up development.
		 Spring Boot Actuator-  Monitering and Management of Application.
		 Spring Boot Starters-  Dependency set for all technologies to minimize setup time.
		 Spring Boot Auto-Configuration- configuration templates for technologies to minimize setup time.

Note:- Spring Boot supports following embedeed containers:-
		1. Tomcat
		2. Jetty
		3. Underflow
		
Q2. What are the advantages of using Spring?
Anwer:- 1. Provides set of managed dependency (It resolves version conflict).
		2. Provides maven plugins.
		3. Provides auto configuration which reduces boilerplate configuration and allow easy customization when
		   defaults are not sufficient.
		4. Maximizes productivity.
		5. Simplifies Deployment, by allowing to create executable jar.
		6. Provides non functional features common for projects- externalized configuration, security, matrix,
		   health checks.
		
@SpringBootApplication
It is a combination of :-
1. @Configuration
2. @EnableAutoConfiguration
3. @ComponentScan		

Note:- @RestController is the combination of Controller and ResponseBody

Q Difference between @Repositiory and @Service? 
Q Difference between @RequestMapping and @GetMapping/@PostMapping?

Q What is content negotiation and how spring boot convert java object to XML or json?
Ans:- Content Negotiation is a data schema like XML,json.
Spring Boot with the help of HttpMessageConverter, it will convert from object to other data format. If the 
required dependencies are available in classpath otherwise  it will throw an exception related to content 
negotiation with status code 406 by default spring boot uses json implementation of HttpMessageConverter from
jackson libraries. 

Q Difference b/w @RequestParam and @PathVariable?
Ans:-
	@RequestParam maps Query string parameters to handle method arguments.
	e.g; http://localhost:9999/students/greetings?name=shail
		 http://localhost:9999/students/greetings?name=Shail&state=Bihar
	
	@PathVariable maps a part of the url to handle method argument.
	e.g; http://localhost:9999/students/131
		 http://localhost:9999/students/131/Shail
		 
REST:-
REST stands for Representational State Transfer.
It supports Http and Https protocol.
Rest methods/verbose/operations:-
1. GET
2. POST
3. DELETE
4. PUT 
5. TRACE
6. HEAD
7. PATCH
8. OPTIONS

Idempotent (No change) :-
1. GET - Yes safe
2. POST - No unsafe
3. DELETE - Yes unsafe
4. PUT - Yes unsafe
5. TRACE - Yes safe
6. HEAD - Yes safe
7. PATCH - Yes unsafe
8. OPTIONS - Yes safe

Q what are the Http status return codes?
A) 1XX
    Informational :- The Request has been received and processing of it continues.
B) 2XX
	Successful :- The Request has been successfully received, understood and accepted.
C) 3XX
	Redirection:- Further action is needed to complete the request.
D) 4XX
	Client Error:- The Request is incorrect.
E) 5XX
	Server Error:- The Server failed to process the request.
	
	Important Http status Code:-
	1) 200 :- OK
	2) 201 :- Created
	3) 202 :- Accepted
	4) 404 :- Bad Request
	5) 401 :- UnAuthorized
	6) 406 :- Content Negotiation
	7) 500 :- Server Error
	
Twilio SMS Configuration:-
1. Create an account in twilio.
2. Add twilio dependency in pom.xml
3. Add twilio username, password and trial number in application.properties file
4. To read details of twilio from properties file to java object.
   a) Create a class e.g; TwilioConfiguration and add required field username, password and trial number
   b) Add @Configuration and @ConfigurationProperties("twilio") for getter and setter you can use lombok 
	  or generate getter and setter.
5. Initialize twilio details first like below:-
	@Slf4j
	@Configuration
	public class TwilioInitializer {
	
	private TwilioConfiguration twilioConfig;
	@Autowired
	public TwilioInitializer(TwilioConfiguration twilioConfig) {
		this.twilioConfig=twilioConfig;
		Twilio.init(twilioConfig.getAccountSid(),twilioConfig.getAuthToken());
		log.info("twilio initialized with accountSid {}",twilioConfig.getAccountSid());
	
		
		}

	}
6. Create a class e.g; SMSSender where you can write the logic to send sms like below:- 
	@Slf4j
	@Component
	public class SMSSender {
		@Autowired
		private TwilioConfiguration twilioConfig;
		public void sendSms(SMSRequest sms) {
			if(isPhoneNumberValid(sms.getPhoneNo())) {
				PhoneNumber to = new PhoneNumber(sms.getPhoneNo());
				PhoneNumber from = new PhoneNumber(twilioConfig.getTrialNumber());
				String message = sms.getMessage();
				MessageCreator creator = Message.creator(to,from,message);
				creator.create();
				log.info("message has been send to {}",sms.getPhoneNo());
			}
			else {
				throw new IllegalArgumentException("Phone number "+sms.getPhoneNo()+" is not a valid number");
			}
		}
		private boolean isPhoneNumberValid(String phoneNo) {
	//		to do implement phone validation
			return true;
		}

	}
7. Write a method in a MyController class to test the api like below:-
	@PostMapping("/sms")
	public ResponseEntity<String> sendSMS(@RequestBody SMSRequest smsRequest) {
		smsSender.sendSms(smsRequest);
		return new ResponseEntity<>("message has been send",HttpStatus.OK);
		
	}
8. Prepare test data like below:-
	{
	"phoneNo": "+917354754288",
	"message": "Hii Ambe how are you? Iam Shail Mishra."
	}
9. Enjoy after sending a sms to your friend.

-> BeanValidationMessage and CustomExceptionHandling:-

1.Add validation dependency in pom.xml

2.Add required validation annotation on the fields like below-
  @NotBlank(message = "firstName should not be empty")
	private String firstName;
	
3.Create a class for error message format like ResponseError 

4.Override ResponseEntityExceptionHandler methods in your customExceptionHandler class
  a) Add @ControllerAdvice at customExceptionHandler
  b) @ExceptionHandler at customExceptionHandler methods
  
5.Add @Valid annotation to trigger the validation	

























	
	
	
	
	
	
	
	
	
	
	
	
	
	










































